[gd_scene load_steps=32 format=3 uid="uid://kscnid6txu3f"]

[ext_resource type="Script" uid="uid://c8bi8844w5a5j" path="res://scripts/Level3/SubLevel3.cs" id="1_p3eu8"]
[ext_resource type="PackedScene" uid="uid://cey86jxorl3h7" path="res://scenes/Level3/Others/Portal.tscn" id="2_nrgi1"]
[ext_resource type="PackedScene" uid="uid://uhnhsc4jvdgm" path="res://scenes/Level3/Platform/MovePlatform.tscn" id="3_xy65v"]
[ext_resource type="Shader" uid="uid://13flput6c2f0" path="res://assets/shaders/PlatformHighlight.gdshader" id="4_8cq1w"]
[ext_resource type="PackedScene" uid="uid://bch7nv4v14u6c" path="res://scenes/Level3/Platform/KillingPlatform.tscn" id="4_cku26"]
[ext_resource type="PackedScene" uid="uid://bq4mxmqbe2wau" path="res://scenes/Level3/Platform/WindowsOnly.tscn" id="5_i0iy2"]
[ext_resource type="Shader" uid="uid://dykfihxbavdca" path="res://assets/shaders/Dithering.gdshader" id="5_md5xu"]
[ext_resource type="PackedScene" uid="uid://dyjib31ak5lxc" path="res://scenes/Level3/Platform/StaticPlatform.tscn" id="6_rq5dm"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_p3eu8"]
size = Vector2(128, 1344)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_nrgi1"]
size = Vector2(1920, 128)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_sx3wf"]
resource_local_to_scene = true
shader = ExtResource("4_8cq1w")
shader_parameter/color1 = Color(0, 1, 1, 1)
shader_parameter/frequency = 32.0
shader_parameter/window_size = Vector2(800, 600)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_7ftwb"]
resource_local_to_scene = true
shader = ExtResource("5_md5xu")
shader_parameter/scale = 4.0
shader_parameter/col = Color(0, 1, 1, 1)
shader_parameter/mult = 10.0

[sub_resource type="RectangleShape2D" id="RectangleShape2D_i0iy2"]
resource_local_to_scene = true
size = Vector2(1152, 640)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_c0cke"]
size = Vector2(960, 192)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_k4gsk"]
size = Vector2(960, 192)

[sub_resource type="Shader" id="Shader_dvger"]
resource_local_to_scene = true
code = "shader_type canvas_item;

uniform vec4 border_color: source_color = vec4(1.0, 1.0, 1.0, 1.0);  // Border color
uniform float border_width = 10.0; // Border width in pixels
uniform vec2 window_size = vec2(800.0, 600.0); // Window size in pixels

void fragment() {
    // Get UV-based position in pixels
    vec2 pixel_position = UV * window_size;

    // Calculate distance from each edge in pixels
    float distance_from_left = pixel_position.x;
    float distance_from_right = window_size.x - pixel_position.x;
    float distance_from_top = pixel_position.y;
    float distance_from_bottom = window_size.y - pixel_position.y;

    // Check if we're in the border area
    bool is_border =
        distance_from_left < border_width ||
        distance_from_right < border_width ||
        distance_from_top < border_width ||
        distance_from_bottom < border_width;

    // Apply border color or transparent
    COLOR = is_border ? border_color : vec4(0.0, 0.0, 0.0, 0.0);
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_c0cke"]
resource_local_to_scene = true
shader = SubResource("Shader_dvger")
shader_parameter/border_color = Color(1, 1, 0, 1)
shader_parameter/border_width = 4.0
shader_parameter/window_size = Vector2(800, 600)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_rq5dm"]
resource_local_to_scene = true
size = Vector2(576, 256)

[sub_resource type="Shader" id="Shader_k4gsk"]
resource_local_to_scene = true
code = "shader_type canvas_item;

uniform vec4 border_color: source_color = vec4(1.0, 1.0, 1.0, 1.0);  // Border color
uniform float border_width = 10.0; // Border width in pixels
uniform vec2 window_size = vec2(800.0, 600.0); // Window size in pixels

void fragment() {
    // Get UV-based position in pixels
    vec2 pixel_position = UV * window_size;

    // Calculate distance from each edge in pixels
    float distance_from_left = pixel_position.x;
    float distance_from_right = window_size.x - pixel_position.x;
    float distance_from_top = pixel_position.y;
    float distance_from_bottom = window_size.y - pixel_position.y;

    // Check if we're in the border area
    bool is_border =
        distance_from_left < border_width ||
        distance_from_right < border_width ||
        distance_from_top < border_width ||
        distance_from_bottom < border_width;

    // Apply border color or transparent
    COLOR = is_border ? border_color : vec4(0.0, 0.0, 0.0, 0.0);
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_brctp"]
resource_local_to_scene = true
shader = SubResource("Shader_k4gsk")
shader_parameter/border_color = Color(1, 1, 0, 1)
shader_parameter/border_width = 4.0
shader_parameter/window_size = Vector2(800, 600)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_8cq1w"]
resource_local_to_scene = true
size = Vector2(128, 448)

[sub_resource type="Shader" id="Shader_3p448"]
resource_local_to_scene = true
code = "shader_type canvas_item;

uniform vec4 border_color: source_color = vec4(1.0, 1.0, 1.0, 1.0);  // Border color
uniform float border_width = 10.0; // Border width in pixels
uniform vec2 window_size = vec2(800.0, 600.0); // Window size in pixels

void fragment() {
    // Get UV-based position in pixels
    vec2 pixel_position = UV * window_size;

    // Calculate distance from each edge in pixels
    float distance_from_left = pixel_position.x;
    float distance_from_right = window_size.x - pixel_position.x;
    float distance_from_top = pixel_position.y;
    float distance_from_bottom = window_size.y - pixel_position.y;

    // Check if we're in the border area
    bool is_border =
        distance_from_left < border_width ||
        distance_from_right < border_width ||
        distance_from_top < border_width ||
        distance_from_bottom < border_width;

    // Apply border color or transparent
    COLOR = is_border ? border_color : vec4(0.0, 0.0, 0.0, 0.0);
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_uh3nr"]
resource_local_to_scene = true
shader = SubResource("Shader_3p448")
shader_parameter/border_color = Color(1, 1, 0, 1)
shader_parameter/border_width = 4.0
shader_parameter/window_size = Vector2(800, 600)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_sx3wf"]
resource_local_to_scene = true
size = Vector2(576, 192)

[sub_resource type="Shader" id="Shader_0080t"]
resource_local_to_scene = true
code = "shader_type canvas_item;

uniform vec4 border_color: source_color = vec4(1.0, 1.0, 1.0, 1.0);  // Border color
uniform float border_width = 10.0; // Border width in pixels
uniform vec2 window_size = vec2(800.0, 600.0); // Window size in pixels

void fragment() {
    // Get UV-based position in pixels
    vec2 pixel_position = UV * window_size;

    // Calculate distance from each edge in pixels
    float distance_from_left = pixel_position.x;
    float distance_from_right = window_size.x - pixel_position.x;
    float distance_from_top = pixel_position.y;
    float distance_from_bottom = window_size.y - pixel_position.y;

    // Check if we're in the border area
    bool is_border =
        distance_from_left < border_width ||
        distance_from_right < border_width ||
        distance_from_top < border_width ||
        distance_from_bottom < border_width;

    // Apply border color or transparent
    COLOR = is_border ? border_color : vec4(0.0, 0.0, 0.0, 0.0);
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_yfcmv"]
resource_local_to_scene = true
shader = SubResource("Shader_0080t")
shader_parameter/border_color = Color(1, 1, 0, 1)
shader_parameter/border_width = 4.0
shader_parameter/window_size = Vector2(800, 600)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_brctp"]
resource_local_to_scene = true
size = Vector2(192, 512)

[sub_resource type="Shader" id="Shader_uveo4"]
resource_local_to_scene = true
code = "shader_type canvas_item;

uniform vec4 border_color: source_color = vec4(1.0, 1.0, 1.0, 1.0);  // Border color
uniform float border_width = 10.0; // Border width in pixels
uniform vec2 window_size = vec2(800.0, 600.0); // Window size in pixels

void fragment() {
    // Get UV-based position in pixels
    vec2 pixel_position = UV * window_size;

    // Calculate distance from each edge in pixels
    float distance_from_left = pixel_position.x;
    float distance_from_right = window_size.x - pixel_position.x;
    float distance_from_top = pixel_position.y;
    float distance_from_bottom = window_size.y - pixel_position.y;

    // Check if we're in the border area
    bool is_border =
        distance_from_left < border_width ||
        distance_from_right < border_width ||
        distance_from_top < border_width ||
        distance_from_bottom < border_width;

    // Apply border color or transparent
    COLOR = is_border ? border_color : vec4(0.0, 0.0, 0.0, 0.0);
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_x2e6h"]
resource_local_to_scene = true
shader = SubResource("Shader_uveo4")
shader_parameter/border_color = Color(1, 1, 0, 1)
shader_parameter/border_width = 4.0
shader_parameter/window_size = Vector2(800, 600)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_uh3nr"]
resource_local_to_scene = true
size = Vector2(768, 256)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_dvger"]
resource_local_to_scene = true
size = Vector2(192, 248)

[node name="7" type="Node2D" node_paths=PackedStringArray("windows")]
script = ExtResource("1_p3eu8")
windows = [NodePath("MovePlatform3/Window"), NodePath("KillingPlatform/Window"), NodePath("WindowsOnly/Window"), NodePath("WindowsOnly2/Window"), NodePath("WindowsOnly3/Window"), NodePath("WindowsOnly5/Window"), NodePath("StaticPlateform/Window"), NodePath("WindowsOnly4/Window")]

[node name="Limit" type="StaticBody2D" parent="."]

[node name="L" type="CollisionShape2D" parent="Limit"]
position = Vector2(-64, 544)
shape = SubResource("RectangleShape2D_p3eu8")

[node name="R" type="CollisionShape2D" parent="Limit"]
position = Vector2(1984, 544)
shape = SubResource("RectangleShape2D_p3eu8")

[node name="U" type="CollisionShape2D" parent="Limit"]
position = Vector2(960, -64)
shape = SubResource("RectangleShape2D_nrgi1")

[node name="D" type="CollisionShape2D" parent="Limit"]
position = Vector2(960, 1152)
shape = SubResource("RectangleShape2D_nrgi1")

[node name="6" parent="." instance=ExtResource("2_nrgi1")]
position = Vector2(64, 64)
NextSceneId = 6

[node name="MovePlatform3" parent="." instance=ExtResource("3_xy65v")]
position = Vector2(0, 448)

[node name="PlatformTexture" parent="MovePlatform3/Window" index="0"]
material = SubResource("ShaderMaterial_sx3wf")

[node name="ShaderRect" parent="MovePlatform3/Window" index="1"]
material = SubResource("ShaderMaterial_7ftwb")

[node name="CollisionShape2D" parent="MovePlatform3" index="1"]
position = Vector2(576, 320)
shape = SubResource("RectangleShape2D_i0iy2")

[node name="KillingPlatform" parent="." instance=ExtResource("4_cku26")]
position = Vector2(768, 0)

[node name="CollisionShape2D" parent="KillingPlatform" index="3"]
position = Vector2(480, 96)
shape = SubResource("RectangleShape2D_c0cke")

[node name="CollisionShape2D" parent="KillingPlatform/Area2D" index="0"]
position = Vector2(480, 96)
shape = SubResource("RectangleShape2D_k4gsk")

[node name="WindowsOnly" parent="." instance=ExtResource("5_i0iy2")]
position = Vector2(192, 640)

[node name="PlatformTexture" parent="WindowsOnly/Window" index="0"]
material = SubResource("ShaderMaterial_c0cke")

[node name="CollisionShape2D" parent="WindowsOnly" index="1"]
position = Vector2(288, 128)
shape = SubResource("RectangleShape2D_rq5dm")

[node name="WindowsOnly2" parent="." instance=ExtResource("5_i0iy2")]
position = Vector2(1280, 576)

[node name="PlatformTexture" parent="WindowsOnly2/Window" index="0"]
material = SubResource("ShaderMaterial_brctp")

[node name="CollisionShape2D" parent="WindowsOnly2" index="1"]
position = Vector2(64, 224)
shape = SubResource("RectangleShape2D_8cq1w")

[node name="WindowsOnly3" parent="." instance=ExtResource("5_i0iy2")]
position = Vector2(0, 256)

[node name="PlatformTexture" parent="WindowsOnly3/Window" index="0"]
material = SubResource("ShaderMaterial_uh3nr")

[node name="CollisionShape2D" parent="WindowsOnly3" index="1"]
position = Vector2(288, 96)
shape = SubResource("RectangleShape2D_sx3wf")

[node name="WindowsOnly5" parent="." instance=ExtResource("5_i0iy2")]
position = Vector2(1536, 448)

[node name="PlatformTexture" parent="WindowsOnly5/Window" index="0"]
material = SubResource("ShaderMaterial_yfcmv")

[node name="CollisionShape2D" parent="WindowsOnly5" index="1"]
position = Vector2(96, 256)
shape = SubResource("RectangleShape2D_brctp")

[node name="8" parent="." instance=ExtResource("2_nrgi1")]
position = Vector2(1760, 64)
NextSceneId = 8

[node name="WindowsOnly4" parent="." instance=ExtResource("5_i0iy2")]
position = Vector2(768, 192)

[node name="PlatformTexture" parent="WindowsOnly4/Window" index="0"]
material = SubResource("ShaderMaterial_x2e6h")

[node name="CollisionShape2D" parent="WindowsOnly4" index="1"]
position = Vector2(384, 128)
shape = SubResource("RectangleShape2D_uh3nr")

[node name="StaticPlateform" parent="." instance=ExtResource("6_rq5dm")]
position = Vector2(1536, 192)

[node name="CollisionShape2D" parent="StaticPlateform" index="1"]
position = Vector2(96, 124)
shape = SubResource("RectangleShape2D_dvger")

[editable path="MovePlatform3"]
[editable path="KillingPlatform"]
[editable path="WindowsOnly"]
[editable path="WindowsOnly2"]
[editable path="WindowsOnly3"]
[editable path="WindowsOnly5"]
[editable path="WindowsOnly4"]
[editable path="StaticPlateform"]
