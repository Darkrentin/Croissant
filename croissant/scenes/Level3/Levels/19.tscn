[gd_scene load_steps=38 format=3 uid="uid://bw30pg1fbbvb2"]

[ext_resource type="Script" uid="uid://c8bi8844w5a5j" path="res://scripts/Level3/SubLevel3.cs" id="1_3se3p"]
[ext_resource type="PackedScene" uid="uid://cey86jxorl3h7" path="res://scenes/Level3/Others/Portal.tscn" id="2_85efi"]
[ext_resource type="PackedScene" uid="uid://uhnhsc4jvdgm" path="res://scenes/Level3/Platform/MovePlatform.tscn" id="3_r03uu"]
[ext_resource type="Shader" uid="uid://13flput6c2f0" path="res://assets/shaders/PlatformHighlight.gdshader" id="4_jcqe1"]
[ext_resource type="PackedScene" uid="uid://bq4mxmqbe2wau" path="res://scenes/Level3/Platform/WindowsOnly.tscn" id="5_jcqe1"]
[ext_resource type="PackedScene" uid="uid://b6ci8vrbwflc5" path="res://scenes/Level3/Platform/PlayerOnly.tscn" id="6_u506k"]
[ext_resource type="Shader" uid="uid://dros5mtqte2mk" path="res://assets/shaders/PlainHighlight.gdshader" id="7_lgc21"]
[ext_resource type="PackedScene" uid="uid://bch7nv4v14u6c" path="res://scenes/Level3/Platform/KillingPlatform.tscn" id="8_lgc21"]

[sub_resource type="Shader" id="Shader_lgc21"]
resource_local_to_scene = true
code = "shader_type canvas_item;

uniform vec4 border_color: source_color = vec4(1.0, 1.0, 1.0, 1.0);  // Border color
uniform float border_width = 10.0; // Border width in pixels
uniform vec2 window_size = vec2(800.0, 600.0); // Window size in pixels

void fragment() {
    // Get UV-based position in pixels
    vec2 pixel_position = UV * window_size;

    // Calculate distance from each edge in pixels
    float distance_from_left = pixel_position.x;
    float distance_from_right = window_size.x - pixel_position.x;
    float distance_from_top = pixel_position.y;
    float distance_from_bottom = window_size.y - pixel_position.y;

    // Check if we're in the border area
    bool is_border =
        distance_from_left < border_width ||
        distance_from_right < border_width ||
        distance_from_top < border_width ||
        distance_from_bottom < border_width;

    // Apply border color or transparent
    COLOR = is_border ? border_color : vec4(0.0, 0.0, 0.0, 0.0);
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_aie6x"]
resource_local_to_scene = true
shader = SubResource("Shader_lgc21")
shader_parameter/border_color = Color(1, 1, 0, 1)
shader_parameter/border_width = 4.0
shader_parameter/window_size = Vector2(800, 600)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_5jlu1"]
resource_local_to_scene = true
size = Vector2(128, 128)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_u1n8u"]
size = Vector2(128, 1344)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_r03uu"]
size = Vector2(1920, 128)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_a3s1b"]
resource_local_to_scene = true
shader = ExtResource("4_jcqe1")
shader_parameter/color1 = Color(0, 1, 1, 1)
shader_parameter/color2 = Color(0, 0, 1, 0)
shader_parameter/animate = true
shader_parameter/direction = -1.0
shader_parameter/frequency = 32.0
shader_parameter/speed = 0.3
shader_parameter/border_width = 4.0
shader_parameter/window_size = Vector2(800, 600)
shader_parameter/Time = 0.0

[sub_resource type="RectangleShape2D" id="RectangleShape2D_u506k"]
resource_local_to_scene = true
size = Vector2(128, 832)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_nhn6i"]
resource_local_to_scene = true
shader = ExtResource("7_lgc21")
shader_parameter/border_color = Color(0, 1, 0, 1)
shader_parameter/border_width = 4.0
shader_parameter/window_size = Vector2(800, 600)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_aie6x"]
resource_local_to_scene = true
size = Vector2(544, 248)

[sub_resource type="Shader" id="Shader_u506k"]
resource_local_to_scene = true
code = "shader_type canvas_item;

uniform vec4 border_color: source_color = vec4(1.0, 1.0, 1.0, 1.0);  // Border color
uniform float border_width = 10.0; // Border width in pixels
uniform vec2 window_size = vec2(800.0, 600.0); // Window size in pixels

void fragment() {
    // Get UV-based position in pixels
    vec2 pixel_position = UV * window_size;

    // Calculate distance from each edge in pixels
    float distance_from_left = pixel_position.x;
    float distance_from_right = window_size.x - pixel_position.x;
    float distance_from_top = pixel_position.y;
    float distance_from_bottom = window_size.y - pixel_position.y;

    // Check if we're in the border area
    bool is_border =
        distance_from_left < border_width ||
        distance_from_right < border_width ||
        distance_from_top < border_width ||
        distance_from_bottom < border_width;

    // Apply border color or transparent
    COLOR = is_border ? border_color : vec4(0.0, 0.0, 0.0, 0.0);
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_lgc21"]
resource_local_to_scene = true
shader = SubResource("Shader_u506k")
shader_parameter/border_color = Color(1, 1, 0, 1)
shader_parameter/border_width = 4.0
shader_parameter/window_size = Vector2(800, 600)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_nhn6i"]
resource_local_to_scene = true
size = Vector2(128, 832)

[sub_resource type="Shader" id="Shader_nhn6i"]
resource_local_to_scene = true
code = "shader_type canvas_item;

uniform vec4 border_color: source_color = vec4(1.0, 1.0, 1.0, 1.0);  // Border color
uniform float border_width = 10.0; // Border width in pixels
uniform vec2 window_size = vec2(800.0, 600.0); // Window size in pixels

void fragment() {
    // Get UV-based position in pixels
    vec2 pixel_position = UV * window_size;

    // Calculate distance from each edge in pixels
    float distance_from_left = pixel_position.x;
    float distance_from_right = window_size.x - pixel_position.x;
    float distance_from_top = pixel_position.y;
    float distance_from_bottom = window_size.y - pixel_position.y;

    // Check if we're in the border area
    bool is_border =
        distance_from_left < border_width ||
        distance_from_right < border_width ||
        distance_from_top < border_width ||
        distance_from_bottom < border_width;

    // Apply border color or transparent
    COLOR = is_border ? border_color : vec4(0.0, 0.0, 0.0, 0.0);
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_5jlu1"]
resource_local_to_scene = true
shader = SubResource("Shader_nhn6i")
shader_parameter/border_color = Color(1, 1, 0, 1)
shader_parameter/border_width = 4.0
shader_parameter/window_size = Vector2(800, 600)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_vueqc"]
resource_local_to_scene = true
size = Vector2(192, 120)

[sub_resource type="Shader" id="Shader_aie6x"]
resource_local_to_scene = true
code = "shader_type canvas_item;

uniform vec4 border_color: source_color = vec4(1.0, 1.0, 1.0, 1.0);  // Border color
uniform float border_width = 10.0; // Border width in pixels
uniform vec2 window_size = vec2(800.0, 600.0); // Window size in pixels

void fragment() {
    // Get UV-based position in pixels
    vec2 pixel_position = UV * window_size;

    // Calculate distance from each edge in pixels
    float distance_from_left = pixel_position.x;
    float distance_from_right = window_size.x - pixel_position.x;
    float distance_from_top = pixel_position.y;
    float distance_from_bottom = window_size.y - pixel_position.y;

    // Check if we're in the border area
    bool is_border =
        distance_from_left < border_width ||
        distance_from_right < border_width ||
        distance_from_top < border_width ||
        distance_from_bottom < border_width;

    // Apply border color or transparent
    COLOR = is_border ? border_color : vec4(0.0, 0.0, 0.0, 0.0);
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_vueqc"]
resource_local_to_scene = true
shader = SubResource("Shader_aie6x")
shader_parameter/border_color = Color(1, 1, 0, 1)
shader_parameter/border_width = 4.0
shader_parameter/window_size = Vector2(800, 600)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_iqb0p"]
resource_local_to_scene = true
size = Vector2(336, 128)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_gnhw4"]
size = Vector2(352, 248)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_xc413"]
size = Vector2(352, 248)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_dl4bh"]
size = Vector2(392, 248)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_n2nvc"]
size = Vector2(392, 248)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_iqb0p"]
resource_local_to_scene = true
shader = ExtResource("7_lgc21")
shader_parameter/border_color = Color(0, 1, 0, 1)
shader_parameter/border_width = 4.0
shader_parameter/window_size = Vector2(800, 600)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_4crkw"]
resource_local_to_scene = true
size = Vector2(192, 128)

[sub_resource type="Shader" id="Shader_5jlu1"]
resource_local_to_scene = true
code = "shader_type canvas_item;

uniform vec4 border_color: source_color = vec4(1.0, 1.0, 1.0, 1.0);  // Border color
uniform float border_width = 10.0; // Border width in pixels
uniform vec2 window_size = vec2(800.0, 600.0); // Window size in pixels

void fragment() {
    // Get UV-based position in pixels
    vec2 pixel_position = UV * window_size;

    // Calculate distance from each edge in pixels
    float distance_from_left = pixel_position.x;
    float distance_from_right = window_size.x - pixel_position.x;
    float distance_from_top = pixel_position.y;
    float distance_from_bottom = window_size.y - pixel_position.y;

    // Check if we're in the border area
    bool is_border =
        distance_from_left < border_width ||
        distance_from_right < border_width ||
        distance_from_top < border_width ||
        distance_from_bottom < border_width;

    // Apply border color or transparent
    COLOR = is_border ? border_color : vec4(0.0, 0.0, 0.0, 0.0);
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_avlw7"]
resource_local_to_scene = true
shader = SubResource("Shader_5jlu1")
shader_parameter/border_color = Color(1, 1, 0, 1)
shader_parameter/border_width = 4.0
shader_parameter/window_size = Vector2(800, 600)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_xuiov"]
resource_local_to_scene = true
size = Vector2(472, 248)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_avlw7"]
size = Vector2(120, 192)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_dja8y"]
size = Vector2(120, 192)

[node name="19" type="Node2D" node_paths=PackedStringArray("windows")]
script = ExtResource("1_3se3p")
windows = [NodePath("WindowsOnly3/Window"), NodePath("MovePlatform/Window"), NodePath("PlayerOnly/Window"), NodePath("WindowsOnly2/Window"), NodePath("WindowsOnly4/Window"), NodePath("WindowsOnly5/Window"), NodePath("KillingPlatform2/Window"), NodePath("KillingPlatform3/Window"), NodePath("PlayerOnly2/Window"), NodePath("WindowsOnly6/Window"), NodePath("KillingPlatform/Window")]

[node name="WindowsOnly3" parent="." instance=ExtResource("5_jcqe1")]
position = Vector2(192, 424)

[node name="PlatformTexture" parent="WindowsOnly3/Window" index="0"]
material = SubResource("ShaderMaterial_aie6x")

[node name="CollisionShape2D" parent="WindowsOnly3" index="1"]
position = Vector2(64, 64)
shape = SubResource("RectangleShape2D_5jlu1")

[node name="Limit" type="StaticBody2D" parent="."]

[node name="L" type="CollisionShape2D" parent="Limit"]
position = Vector2(-64, 544)
shape = SubResource("RectangleShape2D_u1n8u")

[node name="R" type="CollisionShape2D" parent="Limit"]
position = Vector2(1984, 544)
shape = SubResource("RectangleShape2D_u1n8u")

[node name="U" type="CollisionShape2D" parent="Limit"]
position = Vector2(960, -64)
shape = SubResource("RectangleShape2D_r03uu")

[node name="D" type="CollisionShape2D" parent="Limit"]
position = Vector2(960, 1152)
shape = SubResource("RectangleShape2D_r03uu")

[node name="18" parent="." instance=ExtResource("2_85efi")]
position = Vector2(8, 944)
NextSceneId = 18

[node name="20" parent="." instance=ExtResource("2_85efi")]
position = Vector2(1776, 16)
NextSceneId = 20

[node name="MovePlatform" parent="." instance=ExtResource("3_r03uu")]
position = Vector2(320, 256)

[node name="PlatformTexture" parent="MovePlatform/Window" index="0"]
material = SubResource("ShaderMaterial_a3s1b")

[node name="CollisionShape2D" parent="MovePlatform" index="1"]
position = Vector2(64, 416)
shape = SubResource("RectangleShape2D_u506k")

[node name="PlayerOnly" parent="." instance=ExtResource("6_u506k")]
position = Vector2(352, 0)

[node name="PlatformTexture" parent="PlayerOnly/Window" index="0"]
material = SubResource("ShaderMaterial_nhn6i")

[node name="CollisionShape2D" parent="PlayerOnly" index="1"]
position = Vector2(272, 124)
shape = SubResource("RectangleShape2D_aie6x")

[node name="WindowsOnly2" parent="." instance=ExtResource("5_jcqe1")]
position = Vector2(704, 256)

[node name="PlatformTexture" parent="WindowsOnly2/Window" index="0"]
material = SubResource("ShaderMaterial_lgc21")

[node name="CollisionShape2D" parent="WindowsOnly2" index="1"]
position = Vector2(64, 416)
shape = SubResource("RectangleShape2D_nhn6i")

[node name="WindowsOnly4" parent="." instance=ExtResource("5_jcqe1")]
position = Vector2(0, 808)

[node name="PlatformTexture" parent="WindowsOnly4/Window" index="0"]
material = SubResource("ShaderMaterial_5jlu1")

[node name="CollisionShape2D" parent="WindowsOnly4" index="1"]
position = Vector2(96, 60)
shape = SubResource("RectangleShape2D_vueqc")

[node name="WindowsOnly5" parent="." instance=ExtResource("5_jcqe1")]
position = Vector2(984, 472)

[node name="PlatformTexture" parent="WindowsOnly5/Window" index="0"]
material = SubResource("ShaderMaterial_vueqc")

[node name="CollisionShape2D" parent="WindowsOnly5" index="1"]
position = Vector2(168, 64)
shape = SubResource("RectangleShape2D_iqb0p")

[node name="KillingPlatform2" parent="." instance=ExtResource("8_lgc21")]

[node name="Window" parent="KillingPlatform2" index="0"]
position = Vector2i(0, 36)

[node name="CollisionShape2D" parent="KillingPlatform2" index="3"]
position = Vector2(176, 124)
shape = SubResource("RectangleShape2D_gnhw4")

[node name="CollisionShape2D" parent="KillingPlatform2/Area2D" index="0"]
position = Vector2(176, 124)
shape = SubResource("RectangleShape2D_xc413")

[node name="KillingPlatform3" parent="." instance=ExtResource("8_lgc21")]
position = Vector2(896, 0)

[node name="Window" parent="KillingPlatform3" index="0"]
position = Vector2i(0, 36)

[node name="CollisionShape2D" parent="KillingPlatform3" index="3"]
position = Vector2(196, 124)
shape = SubResource("RectangleShape2D_dl4bh")

[node name="CollisionShape2D" parent="KillingPlatform3/Area2D" index="0"]
position = Vector2(196, 124)
shape = SubResource("RectangleShape2D_n2nvc")

[node name="PlayerOnly2" parent="." instance=ExtResource("6_u506k")]
position = Vector2(0, 424)

[node name="PlatformTexture" parent="PlayerOnly2/Window" index="0"]
material = SubResource("ShaderMaterial_iqb0p")

[node name="CollisionShape2D" parent="PlayerOnly2" index="1"]
position = Vector2(96, 64)
shape = SubResource("RectangleShape2D_4crkw")

[node name="WindowsOnly6" parent="." instance=ExtResource("5_jcqe1")]
position = Vector2(1288, 0)

[node name="PlatformTexture" parent="WindowsOnly6/Window" index="0"]
material = SubResource("ShaderMaterial_avlw7")

[node name="CollisionShape2D" parent="WindowsOnly6" index="1"]
position = Vector2(236, 124)
shape = SubResource("RectangleShape2D_xuiov")

[node name="KillingPlatform" parent="." instance=ExtResource("8_lgc21")]
position = Vector2(1472, 896)

[node name="Window" parent="KillingPlatform" index="0"]
position = Vector2i(0, 36)

[node name="CollisionShape2D" parent="KillingPlatform" index="3"]
position = Vector2(60, 96)
shape = SubResource("RectangleShape2D_avlw7")

[node name="CollisionShape2D" parent="KillingPlatform/Area2D" index="0"]
position = Vector2(60, 96)
shape = SubResource("RectangleShape2D_dja8y")

[editable path="WindowsOnly3"]
[editable path="MovePlatform"]
[editable path="PlayerOnly"]
[editable path="WindowsOnly2"]
[editable path="WindowsOnly4"]
[editable path="WindowsOnly5"]
[editable path="KillingPlatform2"]
[editable path="KillingPlatform3"]
[editable path="PlayerOnly2"]
[editable path="WindowsOnly6"]
[editable path="KillingPlatform"]
