[gd_scene load_steps=10 format=3 uid="uid://bq4mxmqbe2wau"]

[ext_resource type="Script" uid="uid://b606h66b1yv" path="res://scripts/Level3/Platform/WindowsOnly.cs" id="1_udtmp"]
[ext_resource type="Script" uid="uid://c3w2gq5l0udid" path="res://scripts/Level3/Platform/WindowPlatform.cs" id="2_6tw0d"]
[ext_resource type="PackedScene" uid="uid://c86vhmqirheox" path="res://scenes/Level3/PlatformTexture.tscn" id="3_udtmp"]
[ext_resource type="Shader" uid="uid://dykfihxbavdca" path="res://assets/shaders/Dithering.gdshader" id="5_6tw0d"]
[ext_resource type="Texture2D" uid="uid://dv5vcpvln3cak" path="res://assets/sprites/platformer/NoPlayer.png" id="6_jl265"]

[sub_resource type="Shader" id="Shader_6tw0d"]
resource_local_to_scene = true
code = "shader_type canvas_item;

uniform vec4 border_color: source_color = vec4(1.0, 1.0, 1.0, 1.0);  // Border color
uniform float border_width = 10.0; // Border width in pixels
uniform vec2 window_size = vec2(800.0, 600.0); // Window size in pixels

void fragment() {
    // Get UV-based position in pixels
    vec2 pixel_position = UV * window_size;

    // Calculate distance from each edge in pixels
    float distance_from_left = pixel_position.x;
    float distance_from_right = window_size.x - pixel_position.x;
    float distance_from_top = pixel_position.y;
    float distance_from_bottom = window_size.y - pixel_position.y;

    // Check if we're in the border area
    bool is_border =
        distance_from_left < border_width ||
        distance_from_right < border_width ||
        distance_from_top < border_width ||
        distance_from_bottom < border_width;

    // Apply border color or transparent
    COLOR = is_border ? border_color : vec4(0.0, 0.0, 0.0, 0.0);
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ci38t"]
resource_local_to_scene = true
shader = SubResource("Shader_6tw0d")
shader_parameter/border_color = Color(1, 1, 0, 1)
shader_parameter/border_width = 4.0
shader_parameter/window_size = Vector2(800, 600)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_jl265"]
shader = ExtResource("5_6tw0d")
shader_parameter/scale = 4.0
shader_parameter/col = Color(1, 1, 0, 1)
shader_parameter/mult = 10.0

[sub_resource type="RectangleShape2D" id="RectangleShape2D_jl265"]
resource_local_to_scene = true
size = Vector2(120, 120)

[node name="WindowsOnly" type="CharacterBody2D" node_paths=PackedStringArray("HighlightRect", "window", "collisionShape", "Texture")]
collision_layer = 8
collision_mask = 2
script = ExtResource("1_udtmp")
HighlightRect = NodePath("Window/PlatformTexture")
window = NodePath("Window")
collisionShape = NodePath("CollisionShape2D")
Texture = NodePath("Window/PlatformTexture")

[node name="Window" type="Window" parent="."]
auto_translate_mode = 1
transparent_bg = true
canvas_item_default_texture_filter = 0
position = Vector2i(0, 36)
size = Vector2i(120, 120)
transparent = true
sharp_corners = true
script = ExtResource("2_6tw0d")

[node name="PlatformTexture" parent="Window" instance=ExtResource("3_udtmp")]
material = SubResource("ShaderMaterial_ci38t")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
offset_right = 0.0
offset_bottom = 0.0
grow_horizontal = 2
grow_vertical = 2

[node name="ShaderRect" type="ColorRect" parent="Window"]
material = SubResource("ShaderMaterial_jl265")
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="Control" type="Control" parent="Window"]
layout_mode = 3
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -0.5
offset_top = -0.5
offset_right = 0.5
offset_bottom = 0.5
grow_horizontal = 2
grow_vertical = 2

[node name="Sprite2D" type="Sprite2D" parent="Window/Control"]
scale = Vector2(0.25, 0.25)
texture = ExtResource("6_jl265")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(60, 60)
shape = SubResource("RectangleShape2D_jl265")
